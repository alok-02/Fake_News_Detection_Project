{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"ImcmoKbsebd_"},"outputs":[],"source":["\n","import pandas as pd\n","\n","# # Load your dataset into a pandas DataFrame\n","train_news = pd.read_csv('/content/drive/MyDrive/Colab_Notebooks/Fake_News_Detection/train.csv')\n","test_news = pd.read_csv('/content/drive/MyDrive/Colab_Notebooks/Fake_News_Detection/test.csv')\n","valid_news = pd.read_csv('/content/drive/MyDrive/Colab_Notebooks/Fake_News_Detection/valid.csv')\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":2584,"status":"ok","timestamp":1688952585306,"user":{"displayName":"Alok Kumar","userId":"15647139801406588119"},"user_tz":-330},"id":"JK5LIKSums5f","outputId":"877f43e3-4adb-4d09-a97f-6d6ea5459761"},"outputs":[{"name":"stdout","output_type":"stream","text":["training dataset size:\n","(10240, 2)\n","                                           Statement  Label\n","0  Says the Annies List political group supports ...  False\n","1  When did the decline of coal start? It started...   True\n","2  Hillary Clinton agrees with John McCain \"by vo...   True\n","3  Health care reform legislation is likely to ma...  False\n","4  The economic turnaround started at the end of ...   True\n","5  The Chicago Bears have had more starting quart...   True\n","6  Jim Dunnam has not lived in the district he re...  False\n","7  I'm the only person on this stage who has work...   True\n","8  However, it took $19.5 million in Oregon Lotte...   True\n","9  Says GOP primary opponents Glenn Grothman and ...   True\n","(2551, 2)\n","                                           Statement  Label\n","0  Building a wall on the U.S.-Mexico border will...   True\n","1  Wisconsin is on pace to double the number of l...  False\n","2  Says John McCain has done nothing to help the ...  False\n","3  Suzanne Bonamici supports a plan that will cut...   True\n","4  When asked by a reporter whether hes at the ce...  False\n","5  Over the past five years the federal governmen...   True\n","6  Says that Tennessee law requires that schools ...   True\n","7  Says Vice President Joe Biden \"admits that the...  False\n","8  Donald Trump is against marriage equality. He ...   True\n","9  We know that more than half of Hillary Clinton...  False\n","(2571, 2)\n","                                           Statement  Label\n","0  We have less Americans working now than in the...  FALSE\n","1  When Obama was sworn into office, he DID NOT u...  FALSE\n","2  Says Having organizations parading as being so...  FALSE\n","3     Says nearly half of Oregons children are poor.   TRUE\n","4  On attacks by Republicans that various program...   TRUE\n","5  Says when armed civilians stop mass shootings ...  FALSE\n","6  Says Tennessee is providing millions of dollar...   TRUE\n","7  The health care reform plan would set limits s...  FALSE\n","8  Says Donald Trump started his career back in 1...   TRUE\n","9  Bill White has a long history of trying to lim...   TRUE\n","Checking data qualitites...\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 10240 entries, 0 to 10239\n","Data columns (total 2 columns):\n"," #   Column     Non-Null Count  Dtype \n","---  ------     --------------  ----- \n"," 0   Statement  10240 non-null  object\n"," 1   Label      10240 non-null  bool  \n","dtypes: bool(1), object(1)\n","memory usage: 90.1+ KB\n","check finished.\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 2551 entries, 0 to 2550\n","Data columns (total 2 columns):\n"," #   Column     Non-Null Count  Dtype \n","---  ------     --------------  ----- \n"," 0   Statement  2551 non-null   object\n"," 1   Label      2551 non-null   bool  \n","dtypes: bool(1), object(1)\n","memory usage: 22.5+ KB\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 2571 entries, 0 to 2570\n","Data columns (total 2 columns):\n"," #   Column     Non-Null Count  Dtype \n","---  ------     --------------  ----- \n"," 0   Statement  2571 non-null   object\n"," 1   Label      2569 non-null   object\n","dtypes: object(2)\n","memory usage: 40.3+ KB\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["\n","import pandas as pd\n","import csv\n","import numpy as np\n","import nltk\n","import seaborn as sb\n","\n","\n","#data observation\n","def data_obs():\n","    print(\"training dataset size:\")\n","    print(train_news.shape)\n","    print(train_news.head(10))\n","\n","    #below dataset were used for testing and validation purposes\n","    print(test_news.shape)\n","    print(test_news.head(10))\n","\n","    print(valid_news.shape)\n","    print(valid_news.head(10))\n","\n","#check the data by calling below function\n","data_obs()\n","\n","#distribution of classes for prediction\n","def create_distribution(dataFile):\n","    return sb.countplot(x='Label', data=dataFile)\n","\n","\n","#by calling below we can see that training, test and valid data seems to be failry evenly distributed between the classes\n","create_distribution(train_news)\n","create_distribution(test_news)\n","\n","\n","\n","#data integrity check (missing label values)\n","#none of the datasets contains missing values therefore no cleaning required\n","def data_qualityCheck():\n","\n","    print(\"Checking data qualitites...\")\n","    train_news.isnull().sum()\n","    train_news.info()\n","\n","    print(\"check finished.\")\n","\n","    #below datasets were used to\n","    test_news.isnull().sum()\n","    test_news.info()\n","\n","    valid_news.isnull().sum()\n","    valid_news.info()\n","\n","#run the below function call to see the quality check results\n","data_qualityCheck()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1129,"status":"ok","timestamp":1688924583829,"user":{"displayName":"Alok Kumar","userId":"15647139801406588119"},"user_tz":-330},"id":"-n2TTllAv87K","outputId":"028065be-b732-4e65-ac47-43647cbe460f"},"outputs":[{"name":"stderr","output_type":"stream","text":["[nltk_data] Downloading package treebank to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/treebank.zip.\n"]},{"data":{"text/plain":["True"]},"execution_count":18,"metadata":{},"output_type":"execute_result"}],"source":["import nltk\n","nltk.download('treebank')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":17218,"status":"ok","timestamp":1688952610886,"user":{"displayName":"Alok Kumar","userId":"15647139801406588119"},"user_tz":-330},"id":"-dB10JmcmLMc","outputId":"ed2d67ef-ff2a-44d5-fc7d-e8eaf8cb3a72"},"outputs":[{"name":"stdout","output_type":"stream","text":["CountVectorizer()\n","  (0, 9676)\t1\n","  (0, 10988)\t1\n","  (0, 1044)\t1\n","  (0, 6639)\t1\n","  (0, 8376)\t1\n","  (0, 5115)\t1\n","  (0, 10709)\t1\n","  (0, 11036)\t1\n","  (0, 11296)\t1\n","  (0, 615)\t1\n","  (0, 7728)\t1\n","  (0, 3278)\t1\n","  (1, 10988)\t1\n","  (1, 11934)\t2\n","  (1, 3434)\t1\n","  (1, 3185)\t1\n","  (1, 7672)\t1\n","  (1, 2475)\t1\n","  (1, 10425)\t1\n","  (1, 6052)\t1\n","  (1, 10426)\t2\n","  (1, 7418)\t1\n","  (1, 4860)\t1\n","  (1, 11138)\t1\n","  (1, 7674)\t1\n","  :\t:\n","  (10239, 10988)\t1\n","  (10239, 7672)\t2\n","  (10239, 11110)\t2\n","  (10239, 5267)\t1\n","  (10239, 7828)\t1\n","  (10239, 7824)\t1\n","  (10239, 1159)\t1\n","  (10239, 12151)\t2\n","  (10239, 6327)\t1\n","  (10239, 6603)\t1\n","  (10239, 11013)\t1\n","  (10239, 11004)\t1\n","  (10239, 3309)\t1\n","  (10239, 12158)\t1\n","  (10239, 11660)\t2\n","  (10239, 799)\t1\n","  (10239, 2568)\t1\n","  (10239, 11622)\t1\n","  (10239, 2549)\t1\n","  (10239, 10660)\t1\n","  (10239, 8996)\t1\n","  (10239, 10918)\t1\n","  (10239, 3989)\t1\n","  (10239, 10594)\t1\n","  (10239, 6853)\t1\n","0        Says the Annies List political group supports ...\n","1        When did the decline of coal start? It started...\n","2        Hillary Clinton agrees with John McCain \"by vo...\n","3        Health care reform legislation is likely to ma...\n","4        The economic turnaround started at the end of ...\n","                               ...                        \n","10235    There are a larger number of shark attacks in ...\n","10236    Democrats have now become the party of the [At...\n","10237    Says an alternative to Social Security that op...\n","10238    On lifting the U.S. Cuban embargo and allowing...\n","10239    The Department of Veterans Affairs has a manua...\n","Name: Statement, Length: 10240, dtype: object\n"]},{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["\"\\nclass TfidfEmbeddingVectorizer(object):\\n    def __init__(self, word2vec):\\n        self.word2vec = word2vec\\n        self.word2weight = None\\n        self.dim = len(word2vec.itervalues().next())\\n\\n    def fit(self, X, y):\\n        tfidf = TfidfVectorizer(analyzer=lambda x: x)\\n        tfidf.fit(X)\\n        # if a word was never seen - it must be at least as infrequent\\n        # as any of the known words - so the default idf is the max of\\n        # known idf's\\n        max_idf = max(tfidf.idf_)\\n        self.word2weight = defaultdict(\\n            lambda: max_idf,\\n            [(w, tfidf.idf_[i]) for w, i in tfidf.vocabulary_.items()])\\n\\n        return self\\n\\n    def transform(self, X):\\n        return np.array([\\n                np.mean([self.word2vec[w] * self.word2weight[w]\\n                         for w in words if w in self.word2vec] or\\n                        [np.zeros(self.dim)], axis=0)\\n                for words in X\\n            ])\\n\\n\""]},"execution_count":5,"metadata":{},"output_type":"execute_result"}],"source":["\n","import pandas as pd\n","import numpy as np\n","from sklearn.feature_extraction.text import CountVectorizer\n","from sklearn.feature_extraction.text import TfidfTransformer\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.pipeline import Pipeline\n","import nltk\n","import nltk.corpus\n","from nltk.tokenize import word_tokenize\n","from gensim.models.word2vec import Word2Vec\n","\n","\n","#we will start with simple bag of words technique\n","#creating feature vector - document term matrix\n","countV = CountVectorizer()\n","train_count = countV.fit_transform(train_news['Statement'].values)\n","\n","print(train_count)\n","\n","#create tf-df frequency features\n","#tf-idf\n","tfidfV = TfidfTransformer()\n","train_tfidf = tfidfV.fit_transform(train_count)\n","\n","tfidf_ngram = TfidfVectorizer(stop_words='english',ngram_range=(1,4),use_idf=True,smooth_idf=True)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":138209,"status":"ok","timestamp":1688952768768,"user":{"displayName":"Alok Kumar","userId":"15647139801406588119"},"user_tz":-330},"id":"xdC_-lKGvyaJ","outputId":"bcbdcaf8-e0ae-4c24-db76-ea8589a6616c"},"outputs":[{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n","/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["Classifier:  Pipeline(steps=[('NBCV', CountVectorizer()), ('nb_clf', MultinomialNB())])\n","Score: 0.66961153965076\n","score length 5\n","Confusion matrix:\n","[[2118 2370]\n"," [1664 4088]]\n","Total statements classified: 10240 None None None None\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n"]},{"name":"stdout","output_type":"stream","text":["Classifier:  Pipeline(steps=[('LogRCV', CountVectorizer()),\n","                ('LogR_clf', LogisticRegression())])\n","Score: 0.6466692934443682\n","score length 5\n","Confusion matrix:\n","[[2254 2234]\n"," [1936 3816]]\n","Total statements classified: 10240 None None None None\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["Classifier:  Pipeline(steps=[('svmCV', CountVectorizer()), ('svm_clf', LinearSVC())])\n","Score: 0.6104687487924283\n","score length 5\n","Confusion matrix:\n","[[2260 2228]\n"," [2246 3506]]\n","Total statements classified: 10240 None None None None\n","Classifier:  Pipeline(steps=[('rfCV', CountVectorizer()),\n","                ('rf_clf', RandomForestClassifier(n_estimators=200, n_jobs=3))])\n","Score: 0.7011609739851915\n","score length 5\n","Confusion matrix:\n","[[1792 2696]\n"," [1191 4561]]\n","Total statements classified: 10240 None None None None\n"]}],"source":["\n","import numpy as np\n","import pandas as pd\n","import pickle\n","from sklearn.feature_extraction.text import CountVectorizer\n","from sklearn.feature_extraction.text import TfidfTransformer\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.pipeline import Pipeline\n","from sklearn.naive_bayes import MultinomialNB\n","from sklearn.linear_model import  LogisticRegression\n","from sklearn import svm\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.model_selection import KFold\n","from sklearn.metrics import confusion_matrix, f1_score, classification_report\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.model_selection import learning_curve\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import precision_recall_curve\n","from sklearn.metrics import average_precision_score\n","\n","\n","#first we will use bag of words techniques\n","\n","#building classifier using naive bayes\n","nb_pipeline = Pipeline([\n","        ('NBCV',countV),\n","        ('nb_clf',MultinomialNB())])\n","\n","nb_pipeline.fit(train_news['Statement'],train_news['Label'])\n","predicted_nb = nb_pipeline.predict(test_news['Statement'])\n","np.mean(predicted_nb == test_news['Label'])\n","\n","\n","#building classifier using logistic regression\n","logR_pipeline = Pipeline([\n","        ('LogRCV',countV),\n","        ('LogR_clf',LogisticRegression())\n","        ])\n","\n","logR_pipeline.fit(train_news['Statement'],train_news['Label'])\n","predicted_LogR = logR_pipeline.predict(test_news['Statement'])\n","np.mean(predicted_LogR == test_news['Label'])\n","\n","\n","#building Linear SVM classfier\n","svm_pipeline = Pipeline([\n","        ('svmCV',countV),\n","        ('svm_clf',svm.LinearSVC())\n","        ])\n","\n","svm_pipeline.fit(train_news['Statement'],train_news['Label'])\n","predicted_svm = svm_pipeline.predict(test_news['Statement'])\n","np.mean(predicted_svm == test_news['Label'])\n","\n","\n","\n","#random forest\n","random_forest = Pipeline([\n","        ('rfCV',countV),\n","        ('rf_clf',RandomForestClassifier(n_estimators=200,n_jobs=3))\n","        ])\n","\n","random_forest.fit(train_news['Statement'],train_news['Label'])\n","predicted_rf = random_forest.predict(test_news['Statement'])\n","np.mean(predicted_rf == test_news['Label'])\n","\n","\n","#User defined functon for K-Fold cross validatoin\n","def build_confusion_matrix(classifier):\n","\n","    k_fold = KFold(n_splits=5)\n","    scores = []\n","    confusion = np.array([[0,0],[0,0]])\n","\n","    for train_ind, test_ind in k_fold.split(train_news):\n","        train_text = train_news.iloc[train_ind]['Statement']\n","        train_y = train_news.iloc[train_ind]['Label']\n","\n","        test_text = train_news.iloc[test_ind]['Statement']\n","        test_y = train_news.iloc[test_ind]['Label']\n","\n","        classifier.fit(train_text,train_y)\n","        predictions = classifier.predict(test_text)\n","\n","        confusion += confusion_matrix(test_y,predictions)\n","        score = f1_score(test_y,predictions)\n","        scores.append(score)\n","    print(\"Classifier: \",classifier)\n","    print('Total statements classified:', len(train_news),\n","    print('Score:', sum(scores)/len(scores)),\n","    print('score length', len(scores)),\n","    print('Confusion matrix:'),\n","    print(confusion))\n","\n","#K-fold cross validation for all classifiers\n","build_confusion_matrix(nb_pipeline)\n","build_confusion_matrix(logR_pipeline)\n","build_confusion_matrix(svm_pipeline)\n","build_confusion_matrix(random_forest)\n"]},{"cell_type":"code","source":["#========================================================================================\n","#Bag of words confusion matrix and F1 scores\n","\n","#Naive bayes\n","# [2118 2370]\n","# [1664 4088]\n","# f1-Score: 0.669611539651\n","\n","#Logistic regression\n","# [2252 2236]\n","# [1933 3819]\n","# f1-Score: 0.646909097798\n","\n","#svm\n","# [2260 2228]\n","# [2246 3506]\n","#f1-score: 0.610468748792\n","\n","\n","#random forest classifier\n","# [1821 2667]\n","# [1192 4560]\n","# f1-Score: 0.702651511011\n","#========================================================================================="],"metadata":{"id":"tvc0PJVWWamE"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1458115,"status":"ok","timestamp":1688954364004,"user":{"displayName":"Alok Kumar","userId":"15647139801406588119"},"user_tz":-330},"id":"U6i986yPLCUJ","outputId":"b3e04f64-7b33-4b81-9a3e-d5e8ada887ca"},"outputs":[{"name":"stdout","output_type":"stream","text":["Classifier:  Pipeline(steps=[('nb_tfidf',\n","                 TfidfVectorizer(ngram_range=(1, 4), stop_words='english')),\n","                ('nb_clf', MultinomialNB())])\n","Score: 0.7224053159841455\n","score length 5\n","Confusion matrix:\n","[[ 758 3730]\n"," [ 390 5362]]\n","Total statements classified: 10240 None None None None\n","Classifier:  Pipeline(steps=[('LogR_tfidf',\n","                 TfidfVectorizer(ngram_range=(1, 4), stop_words='english')),\n","                ('LogR_clf', LogisticRegression(C=1))])\n","Score: 0.7044355553757985\n","score length 5\n","Confusion matrix:\n","[[1580 2908]\n"," [1043 4709]]\n","Total statements classified: 10240 None None None None\n","Classifier:  Pipeline(steps=[('svm_tfidf',\n","                 TfidfVectorizer(ngram_range=(1, 4), stop_words='english')),\n","                ('svm_clf', LinearSVC())])\n","Score: 0.6790920142902143\n","score length 5\n","Confusion matrix:\n","[[2016 2472]\n"," [1524 4228]]\n","Total statements classified: 10240 None None None None\n","Classifier:  Pipeline(steps=[('rf_tfidf',\n","                 TfidfVectorizer(ngram_range=(1, 4), stop_words='english')),\n","                ('rf_clf', RandomForestClassifier(n_estimators=300, n_jobs=3))])\n","Score: 0.6597434473250703\n","score length 5\n","Confusion matrix:\n","[[1975 2513]\n"," [1683 4069]]\n","Total statements classified: 10240 None None None None\n"]}],"source":["\n","\"\"\"So far we have used bag of words technique to extract the features and passed those featuers into classifiers. We have also seen the\n","f1 scores of these classifiers. now lets enhance these features using term frequency weights with various n-grams\n","\"\"\"\n","\n","##Now using n-grams\n","#naive-bayes classifier\n","nb_pipeline_ngram = Pipeline([\n","        ('nb_tfidf',tfidf_ngram),\n","        ('nb_clf',MultinomialNB())])\n","\n","nb_pipeline_ngram.fit(train_news['Statement'],train_news['Label'])\n","predicted_nb_ngram = nb_pipeline_ngram.predict(test_news['Statement'])\n","np.mean(predicted_nb_ngram == test_news['Label'])\n","\n","\n","#logistic regression classifier\n","logR_pipeline_ngram = Pipeline([\n","        ('LogR_tfidf',tfidf_ngram),\n","        ('LogR_clf',LogisticRegression(penalty=\"l2\",C=1))\n","        ])\n","\n","logR_pipeline_ngram.fit(train_news['Statement'],train_news['Label'])\n","predicted_LogR_ngram = logR_pipeline_ngram.predict(test_news['Statement'])\n","np.mean(predicted_LogR_ngram == test_news['Label'])\n","\n","\n","#linear SVM classifier\n","svm_pipeline_ngram = Pipeline([\n","        ('svm_tfidf',tfidf_ngram),\n","        ('svm_clf',svm.LinearSVC())\n","        ])\n","\n","svm_pipeline_ngram.fit(train_news['Statement'],train_news['Label'])\n","predicted_svm_ngram = svm_pipeline_ngram.predict(test_news['Statement'])\n","np.mean(predicted_svm_ngram == test_news['Label'])\n","\n","\n","\n","#random forest classifier\n","random_forest_ngram = Pipeline([\n","        ('rf_tfidf',tfidf_ngram),\n","        ('rf_clf',RandomForestClassifier(n_estimators=300,n_jobs=3))\n","        ])\n","\n","random_forest_ngram.fit(train_news['Statement'],train_news['Label'])\n","predicted_rf_ngram = random_forest_ngram.predict(test_news['Statement'])\n","np.mean(predicted_rf_ngram == test_news['Label'])\n","\n","\n","#K-fold cross validation for all classifiers\n","build_confusion_matrix(nb_pipeline_ngram)\n","build_confusion_matrix(logR_pipeline_ngram)\n","build_confusion_matrix(svm_pipeline_ngram)\n","build_confusion_matrix(random_forest_ngram)"]},{"cell_type":"code","source":["#========================================================================================\n","#n-grams & tfidf confusion matrix and F1 scores\n","\n","#Naive bayes\n","# [841 3647]\n","# [427 5325]\n","# f1-Score: 0.723262051071\n","\n","#Logistic regression\n","# [1617 2871]\n","# [1097 4655]\n","# f1-Score: 0.70113000531\n","\n","#svm\n","# [2016 2472]\n","# [1524 4228]\n","# f1-Score: 0.67909201429\n","\n","#sgdclassifier\n","# [  10 4478]\n","# [  13 5739]\n","# f1-Score: 0.718731637053\n","\n","#random forest\n","# [1979 2509]\n","# [1630 4122]\n","# f1-Score: 0.665720333284\n","#========================================================================================="],"metadata":{"id":"opGyrp8cWYdw"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kLFMkc5zZgu4","outputId":"8599bb1f-50c7-4e94-f2de-678029421b90"},"outputs":[{"name":"stdout","output_type":"stream","text":["================================Naive Bayes========================================\n","              precision    recall  f1-score   support\n","\n","       False       0.72      0.19      0.30      1169\n","        True       0.58      0.94      0.71      1382\n","\n","    accuracy                           0.59      2551\n","   macro avg       0.65      0.56      0.51      2551\n","weighted avg       0.64      0.59      0.52      2551\n","\n","================================Logistic regression================================\n","              precision    recall  f1-score   support\n","\n","       False       0.64      0.39      0.49      1169\n","        True       0.61      0.81      0.70      1382\n","\n","    accuracy                           0.62      2551\n","   macro avg       0.62      0.60      0.59      2551\n","weighted avg       0.62      0.62      0.60      2551\n","\n","================================SVM================================================\n","              precision    recall  f1-score   support\n","\n","       False       0.61      0.47      0.53      1169\n","        True       0.62      0.74      0.68      1382\n","\n","    accuracy                           0.62      2551\n","   macro avg       0.61      0.61      0.60      2551\n","weighted avg       0.62      0.62      0.61      2551\n","\n","================================Random Forest======================================\n","              precision    recall  f1-score   support\n","\n","       False       0.58      0.48      0.53      1169\n","        True       0.62      0.71      0.66      1382\n","\n","    accuracy                           0.60      2551\n","   macro avg       0.60      0.59      0.59      2551\n","weighted avg       0.60      0.60      0.60      2551\n","\n"]}],"source":["\n","print(\"================================Naive Bayes========================================\")\n","print(classification_report(test_news['Label'], predicted_nb_ngram))\n","print(\"================================Logistic regression================================\")\n","print(classification_report(test_news['Label'], predicted_LogR_ngram))\n","print(\"================================SVM================================================\")\n","print(classification_report(test_news['Label'], predicted_svm_ngram))\n","print(\"================================Random Forest======================================\")\n","print(classification_report(test_news['Label'], predicted_rf_ngram))\n","\n","test_news['Label'].shape\n","\n","\"\"\"\n","Out of all the models fitted, we would take 2 best performing model. we would call them candidate models\n","from the confusion matrix, we can see that random forest and logistic regression are best performing\n","in terms of precision and recall (take a look into false positive and true negative counts which appeares\n","to be low compared to rest of the models)\n","\"\"\"\n","\n","#grid-search parameter optimization\n","#random forest classifier parameters\n","parameters = {'rf_tfidf__ngram_range': [(1, 1), (1, 2),(1,3),(1,4),(1,5)],\n","               'rf_tfidf__use_idf': (True, False),\n","               'rf_clf__max_depth': (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)\n","}\n","\n","gs_clf = GridSearchCV(random_forest_ngram, parameters, n_jobs=-1)\n","gs_clf = gs_clf.fit(train_news['Statement'][:10000],train_news['Label'][:10000])\n","\n","gs_clf.best_score_\n","gs_clf.best_params_\n","gs_clf.cv_results_\n","\n","#logistic regression parameters\n","parameters = {'LogR_tfidf__ngram_range': [(1, 1), (1, 2),(1,3),(1,4),(1,5)],\n","               'LogR_tfidf__use_idf': (True, False),\n","               'LogR_tfidf__smooth_idf': (True, False)\n","}\n","\n","gs_clf = GridSearchCV(logR_pipeline_ngram, parameters, n_jobs=-1)\n","gs_clf = gs_clf.fit(train_news['Statement'][:10000],train_news['Label'][:10000])\n","\n","gs_clf.best_score_\n","gs_clf.best_params_\n","gs_clf.cv_results_\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":21043,"status":"ok","timestamp":1688944326225,"user":{"displayName":"Alok Kumar","userId":"15647139801406588119"},"user_tz":-330},"id":"D_rKVT4svp99","outputId":"48e91cc3-2ad5-4ce5-ef83-3bf535f30c5e"},"outputs":[{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]},{"name":"stdout","output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","       False       0.00      0.00      0.00      1169\n","        True       0.54      1.00      0.70      1382\n","\n","    accuracy                           0.54      2551\n","   macro avg       0.27      0.50      0.35      2551\n","weighted avg       0.29      0.54      0.38      2551\n","\n","              precision    recall  f1-score   support\n","\n","       False       0.64      0.38      0.48      1169\n","        True       0.61      0.82      0.70      1382\n","\n","    accuracy                           0.62      2551\n","   macro avg       0.62      0.60      0.59      2551\n","weighted avg       0.62      0.62      0.60      2551\n","\n"]}],"source":["#running both random forest and logistic regression models again with best parameter found with GridSearch method\n","\n","print(\"================================Random Forest======================================\")\n","random_forest_final = Pipeline([\n","        ('rf_tfidf',TfidfVectorizer(stop_words='english',ngram_range=(1,3),use_idf=True,smooth_idf=True)),\n","        ('rf_clf',RandomForestClassifier(n_estimators=300,n_jobs=3,max_depth=10))\n","        ])\n","\n","random_forest_final.fit(train_news['Statement'],train_news['Label'])\n","predicted_rf_final = random_forest_final.predict(test_news['Statement'])\n","np.mean(predicted_rf_final == test_news['Label'])\n","print(classification_report(test_news['Label'], predicted_rf_final))\n","\n","\n","print(\"================================Logistic regression================================\")\n","logR_pipeline_final = Pipeline([\n","        ('LogR_tfidf',TfidfVectorizer(stop_words='english',ngram_range=(1,5),use_idf=True,smooth_idf=False)),\n","        ('LogR_clf',LogisticRegression(penalty=\"l2\",C=1))\n","        ])\n","\n","logR_pipeline_final.fit(train_news['Statement'],train_news['Label'])\n","predicted_LogR_final = logR_pipeline_final.predict(test_news['Statement'])\n","np.mean(predicted_LogR_final == test_news['Label'])\n","#accuracy = 0.62\n","print(classification_report(test_news['Label'], predicted_LogR_final))"]},{"cell_type":"code","execution_count":13,"metadata":{"executionInfo":{"elapsed":524,"status":"ok","timestamp":1688966822709,"user":{"displayName":"Alok Kumar","userId":"15647139801406588119"},"user_tz":-330},"id":"l_jmlOdYOAjP"},"outputs":[],"source":["#saving best model to the disk\n","import pickle\n","model_file = '/content/drive/MyDrive/Colab_Notebooks/Fake_News_Detection/final_model.sav'\n","pickle.dump(logR_pipeline_ngram,open(model_file,'wb'))"]},{"cell_type":"code","source":["def detecting_fake_news(var):\n","#retrieving the best model for prediction call\n","    load_model = pickle.load(open('/content/drive/MyDrive/Colab_Notebooks/Fake_News_Detection/final_model.sav', 'rb'))\n","    prediction = load_model.predict([var])\n","# prob = load_model.predict_proba([var])\n","\n","    return (print(\"The given statement is \",prediction[0]))\n","# print(\"The truth probability score is \",prob[0][1]))"],"metadata":{"id":"eTEsdibPTnDN","executionInfo":{"status":"ok","timestamp":1688967723255,"user_tz":-330,"elapsed":464,"user":{"displayName":"Alok Kumar","userId":"15647139801406588119"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["data=pd.read_csv(\"/content/drive/MyDrive/Colab_Notebooks/Fake_News_Detection/valid.csv\")\n","\n","for i in range(50):\n","  detecting_fake_news(data[\"Statement\"][i])\n","  print(\"Actual Label: \",data[\"Label\"][i])\n","  print(\"\\n\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"chuAhKYHRjBV","executionInfo":{"status":"ok","timestamp":1688967737181,"user_tz":-330,"elapsed":9261,"user":{"displayName":"Alok Kumar","userId":"15647139801406588119"}},"outputId":"a7f00d2e-1e93-44c6-d897-37419775ea99"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["The given statement is  True\n","Actual Label:  FALSE\n","\n","\n","The given statement is  True\n","Actual Label:  FALSE\n","\n","\n","The given statement is  False\n","Actual Label:  FALSE\n","\n","\n","The given statement is  True\n","Actual Label:  TRUE\n","\n","\n","The given statement is  True\n","Actual Label:  TRUE\n","\n","\n","The given statement is  True\n","Actual Label:  FALSE\n","\n","\n","The given statement is  True\n","Actual Label:  TRUE\n","\n","\n","The given statement is  True\n","Actual Label:  FALSE\n","\n","\n","The given statement is  True\n","Actual Label:  TRUE\n","\n","\n","The given statement is  True\n","Actual Label:  TRUE\n","\n","\n","The given statement is  True\n","Actual Label:  TRUE\n","\n","\n","The given statement is  True\n","Actual Label:  FALSE\n","\n","\n","The given statement is  True\n","Actual Label:  TRUE\n","\n","\n","The given statement is  True\n","Actual Label:  TRUE\n","\n","\n","The given statement is  True\n","Actual Label:  FALSE\n","\n","\n","The given statement is  False\n","Actual Label:  TRUE\n","\n","\n","The given statement is  True\n","Actual Label:  TRUE\n","\n","\n","The given statement is  True\n","Actual Label:  TRUE\n","\n","\n","The given statement is  True\n","Actual Label:  FALSE\n","\n","\n","The given statement is  False\n","Actual Label:  FALSE\n","\n","\n","The given statement is  True\n","Actual Label:  TRUE\n","\n","\n","The given statement is  False\n","Actual Label:  FALSE\n","\n","\n","The given statement is  True\n","Actual Label:  TRUE\n","\n","\n","The given statement is  True\n","Actual Label:  FALSE\n","\n","\n","The given statement is  True\n","Actual Label:  TRUE\n","\n","\n","The given statement is  True\n","Actual Label:  FALSE\n","\n","\n","The given statement is  True\n","Actual Label:  TRUE\n","\n","\n","The given statement is  False\n","Actual Label:  FALSE\n","\n","\n","The given statement is  True\n","Actual Label:  TRUE\n","\n","\n","The given statement is  True\n","Actual Label:  FALSE\n","\n","\n","The given statement is  True\n","Actual Label:  FALSE\n","\n","\n","The given statement is  False\n","Actual Label:  FALSE\n","\n","\n","The given statement is  True\n","Actual Label:  FALSE\n","\n","\n","The given statement is  True\n","Actual Label:  FALSE\n","\n","\n","The given statement is  False\n","Actual Label:  FALSE\n","\n","\n","The given statement is  True\n","Actual Label:  TRUE\n","\n","\n","The given statement is  True\n","Actual Label:  TRUE\n","\n","\n","The given statement is  False\n","Actual Label:  TRUE\n","\n","\n","The given statement is  True\n","Actual Label:  FALSE\n","\n","\n","The given statement is  True\n","Actual Label:  TRUE\n","\n","\n","The given statement is  True\n","Actual Label:  TRUE\n","\n","\n","The given statement is  False\n","Actual Label:  FALSE\n","\n","\n","The given statement is  True\n","Actual Label:  TRUE\n","\n","\n","The given statement is  True\n","Actual Label:  FALSE\n","\n","\n","The given statement is  False\n","Actual Label:  FALSE\n","\n","\n","The given statement is  True\n","Actual Label:  TRUE\n","\n","\n","The given statement is  True\n","Actual Label:  TRUE\n","\n","\n","The given statement is  True\n","Actual Label:  TRUE\n","\n","\n","The given statement is  True\n","Actual Label:  TRUE\n","\n","\n","The given statement is  True\n","Actual Label:  TRUE\n","\n","\n"]}]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMwRodXx4iRRvHcs31zrdzh"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}